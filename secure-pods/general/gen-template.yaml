apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: securepodsgatekeeper
spec:
  crd:
    spec:
      names:
        kind: SecurePodsGatekeeper
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          properties:
            repos:
              type: array
              items:
                type: string
            paths:
              type: array
              items:
                type: string
            policy:
              type: array
              items:
                type: string
            probes:
              type: array
              items:
                type: string
            probeTypes:
              type: array
              items:
                type: string
            tags:
              type: array
              items:
                type: string
            cpu:
              type: string
            memory:
              type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package securepodsgatekeeper

        ###### Blocks unsecured registry, check allowed registry from constraints.yaml
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          satisfied := [good | repo = input.parameters.repos[_] ; good = startswith(container.image, repo)]
          not any(satisfied)
          msg := sprintf("container <%v> has an invalid image repo <%v>, allowed repos are %v", [container.name, container.image, input.parameters.repos])
        }
        violation[{"msg": msg}] {
          container := input.review.object.spec.initContainers[_]
          satisfied := [good | repo = input.parameters.repos[_] ; good = startswith(container.image, repo)]
          not any(satisfied)
          msg := sprintf("container <%v> has an invalid image repo <%v>, allowed repos are %v", [container.name, container.image, input.parameters.repos])
        }

        ###### Blocks unsecured hostpath, check allowed paths from constraints.yaml
        violation[{"msg": msg, "details": {}}] {
          input.review.object.kind == "Pod"                               #Checks if the kind is "Pod"
          allowedpaths := input.parameters.paths                          #Stores the allowed paths from the parameter in a variable
          hostpath := input.review.object.spec.volumes[_].hostPath.path   #Stores the host path from the request in a variable
          not contains(allowedpaths,hostpath)                             #Returns true if the host path is not one among the allowed paths
          msg := sprintf("%v not in allowed paths",[hostpath])            #Deny message
        }
        contains(allowedpaths,hostpath) {                                 #Returns true if the host path is in the allowed paths
          hostpath == allowedpaths[_]
        }

        ###### Blocks pods from accessing host PID, IPC
        violation[{"msg": msg, "details": {}}] {
          input_share_hostnamespace(input.review.object)
          msg := sprintf("Sharing the host namespace is not allowed: %v", [input.review.object.metadata.name])
        }
        input_share_hostnamespace(o) {
          o.spec.hostPID
        }
        input_share_hostnamespace(o) {
          o.spec.hostIPC
        }

        ###### Blocks containers from running on privileged mode for ordinary and init containers
        violation[{"msg": msg, "details": {}}] {
          c := input_containers[_]
          c.securityContext.privileged
        msg := sprintf("Privileged container is not allowed: %v, securityContext: %v", [c.name, c.securityContext])
        }
        input_containers[c] {
          c := input.review.object.spec.containers[_]
        }
        input_containers[c] {
          c := input.review.object.spec.initContainers[_]
        }

        ###### Make sure docker images are pulled with respect to policy, check allowed policy from constraints.yaml
        violation[{"msg": msg, "details": {}}] {
          input.review.object.kind = "Pod"
          allowedPolicy := input.parameters.policy
          actualPolicy := input.review.object.spec.containers[_].imagePullPolicy
          not contains(allowedPolicy,actualPolicy)
          msg = sprintf("Forbidden imagePullPolicy value \"%v\"",[actualPolicy])
        }
        contains(allowedPolicy,actualPolicy) {                                 #Returns true if the imagepullpolicy is in the allowed policy
          actualPolicy == allowedPolicy[_]
        }

        ###### Block pods from getting created without readiness/liveness probes
        probe_type_set = probe_types {
          probe_types := {type | type := input.parameters.probeTypes[_]}
        }
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          probe := input.parameters.probes[_]
          probe_is_missing(container, probe)
          msg := get_violation_message(container, input.review, probe)
        }
        probe_is_missing(ctr, probe) = true {
          not ctr[probe]
        }
        probe_is_missing(ctr, probe) = true {
          probe_field_empty(ctr, probe)
        }
        probe_field_empty(ctr, probe) = true {
          probe_fields := {field | ctr[probe][field]}
          diff_fields := probe_type_set - probe_fields
          count(diff_fields) == count(probe_type_set)
        }
        get_violation_message(container, review, probe) = msg {
          msg := sprintf("Container <%v> in your <%v> <%v> has no <%v>", [container.name, review.kind.kind, review.object.metadata.name, probe])
        }

        ###### Block pods from getting created that has image with restricted tag or no tags, check restricted tags from constraints.yaml
        violation[{"msg": msg}] {
          container := input_containers[_]
          tags := [forbid | tag = input.parameters.tags[_] ; forbid = endswith(container.image, concat(":", ["", tag]))]
          any(tags)
          msg := sprintf("container <%v> uses a disallowed tag <%v>; disallowed tags are %v", [container.name, container.image, input.parameters.tags])
        }
        violation[{"msg": msg}] {
          container := input_containers[_]
          tag := [contains(container.image, ":")]
          not all(tag)
          msg := sprintf("container <%v> didn't specify an image tag <%v>", [container.name, container.image])
        }
        input_containers[c] {
          c := input.review.object.spec.containers[_]
        }
        input_containers[c] {
          c := input.review.object.spec.initContainers[_]
        }

        ###### Block pods from getting created with higher resource limits/no range, check limits range from constraints.yaml
        missing(obj, field) = true {
          not obj[field]
        }
        missing(obj, field) = true {
          obj[field] == ""
        }
        canonify_cpu(orig) = new {
          is_number(orig)
          new := orig * 1000
        }
        canonify_cpu(orig) = new {
          not is_number(orig)
          endswith(orig, "m")
          new := to_number(replace(orig, "m", ""))
        }
        canonify_cpu(orig) = new {
          not is_number(orig)
          not endswith(orig, "m")
          re_match("^[0-9]+$", orig)
          new := to_number(orig) * 1000
        }
        # 10 ** 21
        mem_multiple("E") = 1000000000000000000000 { true }
        # 10 ** 18
        mem_multiple("P") = 1000000000000000000 { true }
        # 10 ** 15
        mem_multiple("T") = 1000000000000000 { true }
        # 10 ** 12
        mem_multiple("G") = 1000000000000 { true }
        # 10 ** 9
        mem_multiple("M") = 1000000000 { true }
        # 10 ** 6
        mem_multiple("k") = 1000000 { true }
        # 10 ** 3
        mem_multiple("") = 1000 { true }
        # Kubernetes accepts millibyte precision when it probably shouldn't.
        # https://github.com/kubernetes/kubernetes/issues/28741
        # 10 ** 0
        mem_multiple("m") = 1 { true }
        # 1000 * 2 ** 10
        mem_multiple("Ki") = 1024000 { true }
        # 1000 * 2 ** 20
        mem_multiple("Mi") = 1048576000 { true }
        # 1000 * 2 ** 30
        mem_multiple("Gi") = 1073741824000 { true }
        # 1000 * 2 ** 40
        mem_multiple("Ti") = 1099511627776000 { true }
        # 1000 * 2 ** 50
        mem_multiple("Pi") = 1125899906842624000 { true }
        # 1000 * 2 ** 60
        mem_multiple("Ei") = 1152921504606846976000 { true }
        get_suffix(mem) = suffix {
          not is_string(mem)
          suffix := ""
        }
        get_suffix(mem) = suffix {
          is_string(mem)
          count(mem) > 0
          suffix := substring(mem, count(mem) - 1, -1)
          mem_multiple(suffix)
        }
        get_suffix(mem) = suffix {
          is_string(mem)
          count(mem) > 1
          suffix := substring(mem, count(mem) - 2, -1)
          mem_multiple(suffix)
        }
        get_suffix(mem) = suffix {
          is_string(mem)
          count(mem) > 1
          not mem_multiple(substring(mem, count(mem) - 1, -1))
          not mem_multiple(substring(mem, count(mem) - 2, -1))
          suffix := ""
        }
        get_suffix(mem) = suffix {
          is_string(mem)
          count(mem) == 1
          not mem_multiple(substring(mem, count(mem) - 1, -1))
          suffix := ""
        }
        get_suffix(mem) = suffix {
          is_string(mem)
          count(mem) == 0
          suffix := ""
        }
        canonify_mem(orig) = new {
          is_number(orig)
          new := orig * 1000
        }
        canonify_mem(orig) = new {
          not is_number(orig)
          suffix := get_suffix(orig)
          raw := replace(orig, suffix, "")
          re_match("^[0-9]+$", raw)
          new := to_number(raw) * mem_multiple(suffix)
        }
        violation[{"msg": msg}] {
          general_violation[{"msg": msg, "field": "containers"}]
        }
        violation[{"msg": msg}] {
          general_violation[{"msg": msg, "field": "initContainers"}]
        }
        general_violation[{"msg": msg, "field": field}] {
          container := input.review.object.spec[field][_]
          cpu_orig := container.resources.limits.cpu
          not canonify_cpu(cpu_orig)
          msg := sprintf("container <%v> cpu limit <%v> could not be parsed", [container.name, cpu_orig])
        }
        general_violation[{"msg": msg, "field": field}] {
          container := input.review.object.spec[field][_]
          mem_orig := container.resources.limits.memory
          not canonify_mem(mem_orig)
          msg := sprintf("container <%v> memory limit <%v> could not be parsed", [container.name, mem_orig])
        }
        general_violation[{"msg": msg, "field": field}] {
          container := input.review.object.spec[field][_]
          not container.resources
          msg := sprintf("container <%v> has no resource limits", [container.name])
        }
        general_violation[{"msg": msg, "field": field}] {
          container := input.review.object.spec[field][_]
          not container.resources.limits
          msg := sprintf("container <%v> has no resource limits", [container.name])
        }
        general_violation[{"msg": msg, "field": field}] {
          container := input.review.object.spec[field][_]
          missing(container.resources.limits, "cpu")
          msg := sprintf("container <%v> has no cpu limit", [container.name])
        }
        general_violation[{"msg": msg, "field": field}] {
          container := input.review.object.spec[field][_]
          missing(container.resources.limits, "memory")
          msg := sprintf("container <%v> has no memory limit", [container.name])
        }
        general_violation[{"msg": msg, "field": field}] {
          container := input.review.object.spec[field][_]
          cpu_orig := container.resources.limits.cpu
          cpu := canonify_cpu(cpu_orig)
          max_cpu_orig := input.parameters.cpu
          max_cpu := canonify_cpu(max_cpu_orig)
          cpu > max_cpu
          msg := sprintf("container <%v> cpu limit <%v> is higher than the maximum allowed of <%v>", [container.name, cpu_orig, max_cpu_orig])
        }
        general_violation[{"msg": msg, "field": field}] {
          container := input.review.object.spec[field][_]
          mem_orig := container.resources.limits.memory
          mem := canonify_mem(mem_orig)
          max_mem_orig := input.parameters.memory
          max_mem := canonify_mem(max_mem_orig)
          mem > max_mem
          msg := sprintf("container <%v> memory limit <%v> is higher than the maximum allowed of <%v>", [container.name, mem_orig, max_mem_orig])
        }










